name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry install --no-interaction --no-ansi
        sudo apt-get install shfmt

    - name: Install terraform-docs
      run: |
        wget https://github.com/terraform-docs/terraform-docs/releases/download/v0.17.0/terraform-docs-v0.17.0-linux-amd64.tar.gz
        mkdir -p tmp
        tar -xzf terraform-docs-v0.17.0-linux-amd64.tar.gz -C tmp
        sudo mv tmp/terraform-docs /usr/local/bin/

    - name: Install tflint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

    - name: Install trivy
      run: |
        wget https://github.com/aquasecurity/trivy/releases/download/v0.31.3/trivy_0.31.3_Linux-64bit.tar.gz
        tar -xzf trivy_0.31.3_Linux-64bit.tar.gz -C tmp
        sudo mv tmp/trivy /usr/local/bin/

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.2

    - name: Terraform init
      working-directory: src/infrastructure
      run: terraform init -backend=false

    - name: Terraform init (backend)
      working-directory: src/infrastructure/backend
      run: terraform init

    - name: Run pre-commit
      run: |
        poetry run pre-commit run --all-files

    - name: Show file changes if failure
      if: failure()
      run: git diff --exit-code || (echo "Files were modified by pre-commit hooks. Please commit these changes:" && git diff && exit 1)

  build-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test

    env:
      ECR_REPOSITORY_NAME: market-lambda-repository
      LAMBDA_NAME: market-lambda
      TF_IN_AUTOMATION: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Create backend.hcl file
      run: |
        echo 'bucket = "${{ secrets.TF_BACKEND_BUCKET }}"' > backend.hcl
        echo 'dynamodb_table = "${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}"' >> backend.hcl

    - name: Terraform init
      working-directory: src/infrastructure
      run: terraform init -backend-config=../../backend.hcl

    - name: Create ECR repository
      working-directory: src/infrastructure
      run: |
        terraform apply -auto-approve \
          -target=aws_ecr_repository.erc_repository  \
          -var="image_tag=${{ github.sha }}" \
          -var="erc_repository_name=${{ env.ECR_REPOSITORY_NAME }}" \
          -var="lambda_name=${{ env.LAMBDA_NAME }}"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker Image
      run: |
        docker build --platform linux/amd64 -t ${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }} .

    - name: Push Docker Image to ERC
      run: |
        docker tag ${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }}

    - name: Terraform Apply
      working-directory: src/infrastructure
      run: |
        terraform apply -auto-approve \
          -var="image_tag=${{ github.sha }}" \
          -var="erc_repository_name=${{ env.ECR_REPOSITORY_NAME }}" \
          -var="lambda_name=${{ env.LAMBDA_NAME }}"

    - name: Set Outputs
      id: set-outputs
      run: |
        echo "ecr_repository_name=${{ env.ECR_REPOSITORY_NAME }}" >> "$GITHUB_OUTPUT"
        echo "lambda_name=${{ env.LAMBDA_NAME }}" >> $GITHUB_OUTPUT

  smoke-tests:
    runs-on: ubuntu-latest
    needs: build-deploy

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Verify ECR repository
      run: aws ecr describe-repositories --repository-names ${{ needs.build-deploy.outputs.ecr_repository_name }}

    - name: Verify Lambda
      run: aws lambda get-function --function-name ${{ needs.build-deploy.outputs.lambda_name }}
