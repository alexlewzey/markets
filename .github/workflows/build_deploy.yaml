name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy to:'
        required: true
        type: choice
        options:
        - staging
        - prod
        default: staging

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REPOSITORY_NAME: markets-ecr-repository
      TF_IN_AUTOMATION: true
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      ENVIRONMENT: "${{ github.event_name == 'push' && github.ref == 'refs/heads/main' ? 'prod' : github.event.inputs.environment }}"
      TF_WORKSPACE: markets-${{ env.ENVIRONMENT }}
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.2

    - name: Log environment
      run: echo "Deploying to ${{ env.ENVIRONMENT }}"

    - name: Configure AWS credentials for staging
      if: ${{ env.ENVIRONMENT == 'staging' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: eu-west-2

    - name: Configure AWS credentials for prod
      if: ${{ env.ENVIRONMENT == 'prod' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: eu-west-2

    - name: Terraform init
      working-directory: src/infrastructure
      run: |
        terraform init -input=false
        echo "Current workspace $(terraform workspace show)"
      timeout-minutes: 5


    - name: Create ECR repository
      working-directory: src/infrastructure
      run: |
        terraform apply -auto-approve \
          -target=aws_ecr_repository.erc_repository  \
          -var="image_tag=${{ github.sha }}" \
          -var="erc_repository_name=${{ env.ECR_REPOSITORY_NAME }}" \

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker Image
      run: |
        docker build --platform linux/amd64 -t ${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }} .

    - name: Push Docker Image to ERC
      run: |
        docker tag ${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ github.sha }}

    - name: Terraform Apply
      working-directory: src/infrastructure
      run: |
        terraform apply -auto-approve \
          -var="image_tag=${{ github.sha }}" \
          -var="erc_repository_name=${{ env.ECR_REPOSITORY_NAME }}" \


  test-deployment:
    runs-on: ubuntu-latest
    needs: build-deploy
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry install --no-interaction --no-ansi

    - name: Configure AWS credentials for staging
      if: ${{ env.ENVIRONMENT == 'staging' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: eu-west-2

    - name: Configure AWS credentials for prod
      if: ${{ env.ENVIRONMENT == 'prod' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: eu-west-2

    - name: Run deployment tests
      run: |
        poetry run python -m pytest tests/test_deployment.py
